
function Padgett-Florentine-Families_multiplex1()

    % The obtained partition
    % Block 1, Size: 1
    %   y(9)  x9
    % Block 2, Size: 1
    %   y(18)  t2
    % Block 3, Size: 1
    %   y(17)  t1
    % Block 4, Size: 1
    %   y(3)  x3
    % Block 5, Size: 1
    %   y(7)  x7
    % Block 6, Size: 1
    %   y(8)  x8
    % Block 7, Size: 2
    %   y(12)  x12
    %   y(1)  x1
    % Block 8, Size: 1
    %   y(15)  x15
    % Block 9, Size: 1
    %   y(13)  x13
    % Block 10, Size: 1
    %   y(11)  x11
    % Block 11, Size: 1
    %   y(4)  x4
    % Block 12, Size: 1
    %   y(5)  x5
    % Block 13, Size: 1
    %   y(2)  x2
    % Block 14, Size: 1
    %   y(16)  x16
    % Block 15, Size: 2
    %   y(10)  x10
    %   y(14)  x14
    % Block 16, Size: 1
    %   y(6)  x6

    % The species followed by the parameters
    %	 [x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, t1, t2]  ,  []

    % The linear system Ap = b to be satisfied for BDE
    A = [
    		[-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
    		[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0];
    		[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
    		[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
    		[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
    		[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
    		[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
        ];

    b = [0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0];

    % Check whether the BDE constraints can be satisfied
    p = A\b';
    if(sum(isinf(p) + isnan(p)) > 0 || norm(A*p - b') > (10^-10))
        fprintf('\n======== BDE constraints cannot be satisfied ========\n');
        return;
    end


    % The the initial concentrations of the species, followed by parameters of the reference trajectory
    p0 = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0];


    % Find a point p that satisfies the BDE constraints and that minimizes
    % the Euclidian distance to p0, i.e., solve the quadratic
    % program min_{p : Ap = b} \lVert p - p0 \rVert_2
    pOpt = quadprog(eye(size(p0,2)), -p0, zeros(size(A,1),size(A,2)), zeros(1,size(b,2)), A, b);
    fprintf('====== The approximate BDE is made exact by setting the following initial concentrations: =======================\n')
    fprintf('x1=');
    disp(pOpt(1))
    fprintf('x2=');
    disp(pOpt(2))
    fprintf('x3=');
    disp(pOpt(3))
    fprintf('x4=');
    disp(pOpt(4))
    fprintf('x5=');
    disp(pOpt(5))
    fprintf('x6=');
    disp(pOpt(6))
    fprintf('x7=');
    disp(pOpt(7))
    fprintf('x8=');
    disp(pOpt(8))
    fprintf('x9=');
    disp(pOpt(9))
    fprintf('x10=');
    disp(pOpt(10))
    fprintf('x11=');
    disp(pOpt(11))
    fprintf('x12=');
    disp(pOpt(12))
    fprintf('x13=');
    disp(pOpt(13))
    fprintf('x14=');
    disp(pOpt(14))
    fprintf('x15=');
    disp(pOpt(15))
    fprintf('x16=');
    disp(pOpt(16))
    fprintf('t1=');
    disp(pOpt(17))
    fprintf('t2=');
    disp(pOpt(18))
    fprintf('\n\n');
    fprintf('====== and parameter values: =======================\n')
    fprintf('\n\n');
    dist = pOpt' - p0;
    fprintf('The euclidian norm \n');
    distEucl = norm(dist)
    fprintf('The inf norm       \n');
    distInf = max(dist)
    		

end

